"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=l,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const o={},r=void 0,i={type:"mdx",permalink:"/CatRom/",source:"@site/pages/index.md",description:"Creates Catmull-Rom splines.",frontMatter:{}},p=[{value:"How to use",id:"how-to-use",level:2},{value:"API",id:"api",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"1. Solving with <code>unitSpeed</code>",id:"1-solving-with-unitspeed",level:3},{value:"2. Repeated inputs",id:"2-repeated-inputs",level:3}],u={toc:p},s="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(s,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{align:"center"},(0,l.kt)("img",{src:"https://github.com/ecurtiss/CatRom/blob/master/img/logo-light.svg#gh-light-mode-only",height:"180",alt:"CatRom logo"}),(0,l.kt)("img",{src:"https://github.com/ecurtiss/CatRom/blob/master/img/logo-dark.svg#gh-dark-mode-only",height:"180",alt:"CatRom logo"}),(0,l.kt)("hr",null)),(0,l.kt)("p",null,"Creates ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline"},"Catmull-Rom splines"),"."),(0,l.kt)("p",null,"The Catmull-Rom spline (CatRom) is a cousin of the popular B\xe9zier curve that passes through all of its control points."),(0,l.kt)("img",{src:"img/tube.png",height:"300"}),(0,l.kt)("h2",{id:"how-to-use"},"How to use"),(0,l.kt)("p",null,"The CatRom constructor takes 3 arguments:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"points"),": An array of Vector2s, Vector3s, or CFrames."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"alpha")," ","[optional]",": A number (usually) in ","[0, 1]",' that determines the "parametrization" of the spline; defaults to 0.5.'),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"tension")," ","[optional]",": A number (usually) in ","[0, 1]"," that determines how loose the spline is; defaults to 0.")),(0,l.kt)("p",null,"The default ",(0,l.kt)("inlineCode",{parentName:"p"},"alpha")," of 0.5 is the only way to avoid cusps and loops, as shown ",(0,l.kt)("a",{parentName:"p",href:"http://www.cemyuksel.com/research/catmullrom_param/"},"in this paper"),"."),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"unitSpeed")," argument in each ",(0,l.kt)("inlineCode",{parentName:"p"},"Solve")," method determines whether the calculation uses a unit-speed parametrization of the spline. A unit-speed parametrization (also called an arc length parametrization) has a constant speed of 1, which yields equally spaced points given equally spaced times. This is often visually desirable but increases computation time."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom.new(points: array, alpha: number?, tension: number?)\n")),(0,l.kt)("p",null,"Creates a new Catmull-Rom spline from a list of Vector2s, Vector3s, or CFrames."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolvePosition(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns the position of the spline at time ",(0,l.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveCFrame(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns a CFrame at position ",(0,l.kt)("inlineCode",{parentName:"p"},"SolvePosition(t)")," that faces in the direction of ",(0,l.kt)("inlineCode",{parentName:"p"},"SolveTangent(t)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveRotCFrame(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns a CFrame at position ",(0,l.kt)("inlineCode",{parentName:"p"},"SolvePosition(t)")," with orientation interpolated between the previous and next control points (provided your control points are CFrames). The interpolation uses spherical quadrangle interpolation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveVelocity(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns the velocity of the spline at time ",(0,l.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveAcceleration(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns the acceleration of the spline at time ",(0,l.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveTangent(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns the forward-facing, unit-length tangent vector at time ",(0,l.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveNormal(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns a unit-length vector at time ",(0,l.kt)("inlineCode",{parentName:"p"},"t")," that is perpendicular to the spline and points in the direction of curvature. Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Vector3.new(nan, nan, nan)")," when the curvature is 0."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveBinormal(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns the cross product of ",(0,l.kt)("inlineCode",{parentName:"p"},"SolveTangent(t)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"SolveNormal(t)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveCurvature(t: number, unitSpeed: boolean?)\n")),(0,l.kt)("p",null,"Returns the curvature of the spline at time ",(0,l.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:SolveLength(a: number?, b: number?)\n")),(0,l.kt)("p",null,"Returns the arc length between the points at times ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"CatRom:PrecomputeArcLengthParams(numIntervals: number?)\n")),(0,l.kt)("p",null,"Computes a lookup table that makes ",(0,l.kt)("inlineCode",{parentName:"p"},"unitSpeed")," calculations faster but less accurate."),(0,l.kt)("h2",{id:"performance-tips"},"Performance Tips"),(0,l.kt)("h3",{id:"1-solving-with-unitspeed"},"1. Solving with ",(0,l.kt)("inlineCode",{parentName:"h3"},"unitSpeed")),(0,l.kt)("p",null,"If you are calling many Solve methods with ",(0,l.kt)("inlineCode",{parentName:"p"},"unitSpeed")," true, you should call ",(0,l.kt)("inlineCode",{parentName:"p"},"PrecomputeArcLengthParams()")," immediately after construction. This will make your ",(0,l.kt)("inlineCode",{parentName:"p"},"unitSpeed")," calls less accurate but cheaper to compute. The accuracy can be further tuned using the ",(0,l.kt)("inlineCode",{parentName:"p"},"numIntervals")," argument; lower is faster and less accurate, higher is slower and more accurate (defaults to 16)."),(0,l.kt)("h3",{id:"2-repeated-inputs"},"2. Repeated inputs"),(0,l.kt)("p",null,"If you are calling many methods on the ",(0,l.kt)("em",{parentName:"p"},"same")," input like so"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local t -- number in [0, 1]\nlocal catRom -- a CatRom object\ncatRom:SolvePosition(t)\ncatRom:SolveVelocity(t)\ncatRom:SolveTangent(t)\n")),(0,l.kt)("p",null,"then it is faster to instead do"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local t -- number in [0, 1]\nlocal catRom -- a CatRom object\nlocal spline, splineTime = catRom:GetSplineAtTime(t)\nspline:SolvePosition(splineTime)\nspline:SolveVelocity(splineTime)\nspline:SolveTangent(splineTime)\n")))}m.isMDXComponent=!0}}]);