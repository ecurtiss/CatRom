[{"title":"Segment","type":0,"sectionRef":"#","url":"/CatRom/api/Segment","content":"On this page Segment A single segment of a Catmull-Rom spline that interpolates two control points. CatRom:SolveBulk and CatRom:CreateTween are the only methods that expose a Segment.","keywords":""},{"title":"CatRom","type":0,"sectionRef":"#","url":"/CatRom/api/CatRom","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#types","content":" "},{"title":"Vector​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#Vector","content":"&lt;/&gt; type Vector = Vector2 | Vector3   "},{"title":"Properties​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#properties","content":" "},{"title":"length​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#length","content":"&lt;/&gt; CatRom.length: number The arc length of the spline.  "},{"title":"points​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#points","content":"&lt;/&gt; CatRom.points: {Point} The control points of the spline. This table will not necessarily match the table of control points passed into the constructor, as adjacent points that are fuzzy-equal are removed during construction.  "},{"title":"segments​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#segments","content":"&lt;/&gt; CatRom.segments: {Segment} The chain of interpolating segments that make up the full spline. "},{"title":"Functions​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#functions","content":" "},{"title":"new​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#new","content":"Vector2 Vector3 CFrame &lt;/&gt; CatRom.new( points: {Vector2 } | {Vector3 } | {CFrame },-- A list of points of the same type alpha: number?,-- A number (usually in [0, 1]) that loosely affects the curvature of the spline at the control points (default: 0.5) tension: number?,-- A number (usually in [0, 1]) that changes how taut the spline is (1 gives straight lines) (default: 0) loops: boolean?-- Whether the spline should form a smooth, closed loop ) → CatRom Instantiates a CatRom.  "},{"title":"SolvePosition​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolvePosition","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolvePosition( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector Returns the position at time t.  "},{"title":"SolveVelocity​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveVelocity","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolveVelocity( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector Returns the velocity at time t.  "},{"title":"SolveAcceleration​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveAcceleration","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolveAcceleration( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector Returns the acceleration at time t.  "},{"title":"SolveJerk​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveJerk","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolveJerk( t: number-- Time ) → Vector Returns the jerk at time t.  "},{"title":"SolveTangent​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveTangent","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolveTangent( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector Returns the unit tangent vector at time t.  "},{"title":"SolveNormal​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveNormal","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolveNormal( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector Returns the unit normal vector of the Frenet frame at time t. Returns (nan, nan, nan) if the Frenet frame does not exist (i.e., when curvature is 0).  "},{"title":"SolveBinormal​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveBinormal","content":"Vector3 CFrame Basics &lt;/&gt; CatRom:SolveBinormal( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector3  Returns the unit binormal vector of the Frenet frame at time t. Returns (nan, nan, nan) if the Frenet frame does not exist (i.e., when curvature is 0).  "},{"title":"SolveCurvature​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveCurvature","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolveCurvature( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → number Returns the curvature at time t.  "},{"title":"SolveTorsion​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveTorsion","content":"Vector3 CFrame Basics &lt;/&gt; CatRom:SolveTorsion( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → number Returns the torsion at time t.  "},{"title":"SolveCFrameLookAlong​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveCFrameLookAlong","content":"Vector3 CFrame Moving frames &lt;/&gt; CatRom:SolveCFrameLookAlong( t: number,-- Time unitSpeed: boolean?,-- Whether the spline has unit speed (default: false) upVector: Vector3? -- The goal up vector (default: Vector3.yAxis) ) → CFrame  Returns a CFrame at time t looking along the tangent vector of the spline with the goal up vector upVector.  "},{"title":"SolveCFrameFrenet​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveCFrameFrenet","content":"Vector3 CFrame Moving frames &lt;/&gt; CatRom:SolveCFrameFrenet( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → CFrame  Returns a CFrame at time t with LookVector, UpVector, and RightVector being the unit tangent, normal, and binormal vectors of the Frenet frame, respectively. Returns a CFrame with NaNs in its orientation if the Frenet frame does not exist (i.e., when curvature is 0). The Frenet frame is also prone to sudden twists when curvature is near 0.  "},{"title":"SolveCFrameSquad​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveCFrameSquad","content":"CFrame Moving frames &lt;/&gt; CatRom:SolveCFrameSquad( t: number,-- Time unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → CFrame  Returns a CFrame at time t that smoothly interpolates the orientations of the control points using spherical quadrangle interpolation (SQUAD).  "},{"title":"SolveCFrameRMF​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveCFrameRMF","content":"Vector3 CFrame Moving frames &lt;/&gt; CatRom:SolveCFrameRMF( t: number,-- Time unitSpeed: boolean?,-- Whether the spline has unit speed (default: false) prevFrame: CFrame? ,-- A previous, nearby RMF numFramesPerSegment: number?-- The number of discrete approximations to pass to CatRom:PrecomputeRMFs if necessary (default: 4) ) → CFrame  Returns an approximate rotation-minimizing frame (RMF), i.e., a CFrame that has minimal torsion when swept along the spline. This method is not useful on its own, but it underlies the more powerful CatRom:Transport and CatRom:SlerpNormals (and their bulk alternatives CatRom:GetTransportInterpolant and CatRom:GetSlerpNormalsInterpolant). If you are tweening an RMF over time, then you can supply the RMF from the previous point in time for a better approximation. Doing so also avoids calling CatRom:PrecomputeRMFs, which helps performance. Otherwise, if you do not supply a previous frame and you have not yet called CatRom:PrecomputeRMFs, then CatRom:PrecomputeRMFs will be called for only the necessary segments.  "},{"title":"Transport​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#Transport","content":"Vector3 CFrame Extensions &lt;/&gt; CatRom:Transport( data: Vector3 | CFrame ,-- The data to sweep from: number?,-- The time where the data comes from to: number?,-- The time to sweep to unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector3 | CFrame  Sweeps a Vector3 or CFrame along the spline such that the result has been twisted minimally around the spline. You should call CatRom:PrecomputeRMFs beforehand if you want to control the accuracy of the approximation—otherwise it will be called for you with default values. tip See CatRom:GetTransportInterpolant if you intend to use this method in bulk.  "},{"title":"GetTransportInterpolant​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#GetTransportInterpolant","content":"Vector3 CFrame Extensions &lt;/&gt; CatRom:GetTransportInterpolant( data: Vector3 | CFrame ,-- The data to sweep from: number?,-- The time where the data comes from to: number?,-- The time to sweep to unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → (number) → Vector3 | CFrame -- A function that returns the transported data at a given time Returns a function that sweeps a Vector3 or CFrame along the spline with minimal torsion. You should use this method instead of CatRom:Transport if you are doing transports in bulk, as the interpolant saves on CFrame multiplies. You should call CatRom:PrecomputeRMFs beforehand if you want to control the accuracy of approximation—otherwise it will be called for you with default values.  "},{"title":"SlerpNormals​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SlerpNormals","content":"Vector3 CFrame Extensions &lt;/&gt; CatRom:SlerpNormals( from: number,-- Time fromVector: Vector3 ,-- A vector that is normal to the spline at time from to: number,-- Time toVector: Vector3 ,-- A vector that is normal to the spline at time to t: number,-- The progress of the slerp from fromVector to toVector in [0, 1] unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → Vector3  Slerps the normal vectors fromVector and toVector at times from and to, respectively, with progress t in [0, 1]. fromVector and toVector are projected to ensure that they are normal to the spline. You should call CatRom:PrecomputeRMFs beforehand if you want to control the accuracy of the approximation—otherwise it will be called for you with default values. tip Try CatRom:GetSlerpNormalsInterpolant if you intend to use this method in bulk. "},{"title":"Errors","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom##","content":"Type\tDescriptionBad fromVector\tfromVector cannot be tangent to the spline Bad toVector\ttoVector cannot be tangent to the spline  "},{"title":"GetSlerpNormalsInterpolant​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#GetSlerpNormalsInterpolant","content":"Vector3 CFrame Extensions &lt;/&gt; CatRom:GetSlerpNormalsInterpolant( from: number,-- Time fromVector: Vector3 ,-- A vector that is normal to the spline at time from to: number,-- Time toVector: Vector3 ,-- A vector that is normal to the spline at time to unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → (number) → Vector3 -- A function that returns the interpolated normal at a given time Returns a function that interpolates the normal vectors fromVector and toVector at times from and to, respectively. fromVector and toVector are projected to ensure that they are normal to the spline. You should use this method instead of CatRom:SlerpNormals if you are doing slerps in bulk, as the interpolant saves on Vector operations. You should call CatRom:PrecomputeRMFs beforehand if you want to control the accuracy of the approximation—otherwise it will be called for you with default values. "},{"title":"Errors","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom##","content":"Type\tDescriptionBad fromVector\tfromVector cannot be tangent to the spline Bad toVector\ttoVector cannot be tangent to the spline  "},{"title":"PrecomputeRMFs​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#PrecomputeRMFs","content":"Vector3 CFrame Precomputes &lt;/&gt; CatRom:PrecomputeRMFs( numFramesPerSegment: number?,-- The number of discrete approximations in each segment (default: 4) firstSegmentIndex: number?,-- The index of the first segment to compute RMFs on (default: 1) lastSegmentIndex: number?-- The index of the last segment to compute RMFs on (default: #segments) ) → () Precomputes a discrete approximation of a moving rotation-minimizing frame (RMF) along the spline.  "},{"title":"GetSegmentAtTime​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#GetSegmentAtTime","content":"Vector2 Vector3 CFrame &lt;/&gt; CatRom:GetSegmentAtTime(t: number) → ( Segment,-- The interpolant S_j number,-- The time (t - a) / (b - a) number-- The index j ) In CatRom, a spline S is a piecewise function of n interpolants defined on the interval [0, 1]. We partition [0, 1] into n subintervals of the form [ki, k{i+1}) where 0 = k1 &lt; k2 &lt; ... &lt; kn &lt; k{n+1} = 1. The n+1 numbers k1, ..., k{n+1} are called &quot;knots&quot;. The i^th interpolant Si is defined on the subinterval [k_i, k{i+1}), where the width ki - k{i-1} is proportional to the arc length of Si. That is, k_i - k{i-1} is the arc length of S_i divided by the total arc length of S. Below is an example with n = 5. We can infer that S2 has a short arc length while S4 has a long arc length. k1 k2 k3 k4 k5 k6 | S1 | S2 | S3 | S4 | S5 | 0 ---------------------------------------------------------------------- 1 To compute S(t), we find the subinterval [a, b) containing t and evaluate its corresponding interpolant S_j at t. However, in implementation, S_j is actually defined on [0, 1), so we first map [a, b) -&gt; [0, 1). Hence S(t) = S_j((t - a) / (b - a)). Finally, for completeness, S(1) = S_n(1) with S_n having domain [0, 1] instead of [0, 1). "},{"title":"Errors","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom##","content":"Type\tDescriptionFailed to get segment\tShould never happen  "},{"title":"PrecomputeUnitSpeedData​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#PrecomputeUnitSpeedData","content":"Vector2 Vector3 CFrame Precomputes &lt;/&gt; CatRom:PrecomputeUnitSpeedData( when: &quot;now&quot; | &quot;ondemand&quot;?,-- When the cheb should be computed: &quot;now&quot; is right now (useful for doing bulk solves immediately), &quot;on demand&quot; is as-needed (useful for doing bulk method calls over time) strategy: &quot;fast&quot; | &quot;accurate&quot;?,-- Whether the cheb gets used as a lookup table (&quot;fast&quot;) or evaluated as a polynomial (&quot;accurate&quot;) degree: number?-- The degree of the chebyshev polynomial; higher is more accurate but slower (default: 8) ) → () Makes unitSpeed methods significantly faster but slightly less accurate. It does this by approximating an expensive root-find on the arc length function of a segment with a Chebyshev polynomial that interpolates the inverse of the arc length function. Once the cheb has been computed, you can either use it as a lookup table (&quot;fast&quot; strategy) or evaluate it as a polynomial (&quot;accurate&quot; strategy). The &quot;fast&quot; strategy is roughly an order of magnitude faster than the &quot;accurate&quot; strategy but is less accurate. You should precompute when you are doing more unitSpeed calls per segment in the spline than the degree of the segment's cheb (default: 8).  "},{"title":"SolveLength​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveLength","content":"Vector2 Vector3 CFrame Basics &lt;/&gt; CatRom:SolveLength( from: number?,-- The time to start at (default: 0) to: number?-- The time to end at (default: 1) ) → number Computes the arc length of the spline between the times from and to.  "},{"title":"SolveBulk​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveBulk","content":"Vector2 Vector3 CFrame Extensions &lt;/&gt; CatRom:SolveBulk( f: ( Segment, number ) → (),-- A function accepting a segment and a time numSamples: number,-- The number of uniformly-spaced samples (includes the two samples at the boundaries) from: number?,-- The time to start at (default: 0) to: number?,-- The time to end at (default: 1) unitSpeed: boolean?-- Whether the spline has unit speed (default: false) ) → () A helper method for doing the same computation at many uniformly-spaced times. Has better performance than writing a for loop manually.  "},{"title":"SolveBoundingBox​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#SolveBoundingBox","content":"Vector2 Vector3 CFrame &lt;/&gt; CatRom:SolveBoundingBox() → ( Vector,-- The minimum corner Vector-- The maximum corner ) Returns an axis-aligned box that bounds the spline.  "},{"title":"CreateTween​","type":1,"pageTitle":"CatRom","url":"/CatRom/api/CatRom#CreateTween","content":"Vector2 Vector3 CFrame Extensions &lt;/&gt; CatRom:CreateTween( tweenInfo: TweenInfo , callback: ( Types.Segment, number ) → (), from: number?, to: number?, unitSpeed: boolean? ) → Tween  A wrapper around TweenService that executes a callback function. The callback accepts a segment and a time to pass into the segment's methods. You must manually assign instance properties yourself. -- Tweens a part's CFrame from time 0 to time 1 with unit speed local part = Instance.new(&quot;Part&quot;, workspace) local spline = CatRom.new({...}) local tweenInfo = TweenInfo.new() local callback = function(segment, t) part.CFrame = segment:SolveCFrameRMF(t) end local tween = spline:CreateTween(tweenInfo, callback, 0, 1, true) tween:Play()  "}]